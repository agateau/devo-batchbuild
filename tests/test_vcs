#!/bin/sh
set -e

DEVO_INSTALL_DIR=$HOME/src/devo

cd $(dirname $0)

. ./testutils.sh
SANDBOX_DIR=$PWD/sandbox

export DEVO_OVERLAY_DIR=$PWD/overlay-dir

export REMOTE_DIR=$SANDBOX_DIR/remote

BB_CMD=$PWD/../batchbuild/devo-batchbuild.py


create_remote_foo_repo() {
    oldpwd=$PWD
    cd $REMOTE_DIR
    mkdir foo.git
    cd foo.git
    git init
    touch file1.c
    touch file2.c
    git add .
    git commit -m "Imported"
    cd $oldpwd
}

test_clone() {
    # Run
    $BB_CMD --src-only test_clone.yaml

    assert [ -d $DEVO_SOURCE_BASE_DIR/foo ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/foo/file1.c ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/foo/file2.c ]

    assert [ -d $DEVO_SOURCE_BASE_DIR/sub/foo ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/sub/foo/file1.c ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/sub/foo/file2.c ]
}

test_update() {
    (
        cd $REMOTE_DIR/foo.git
        git rm file1.c
        touch file3.c
        git add file3.c
        git commit -m 'Updated'
    )

    $BB_CMD --src-only test_clone.yaml
    assert [ -d $DEVO_SOURCE_BASE_DIR/foo ]
    assert [ ! -f $DEVO_SOURCE_BASE_DIR/foo/file1.c ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/foo/file2.c ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/foo/file3.c ]

    assert [ -d $DEVO_SOURCE_BASE_DIR/sub/foo ]
    assert [ ! -f $DEVO_SOURCE_BASE_DIR/sub/foo/file1.c ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/sub/foo/file2.c ]
    assert [ -f $DEVO_SOURCE_BASE_DIR/sub/foo/file3.c ]
}

# Create sandbox
rm -rf $SANDBOX_DIR
mkdir $SANDBOX_DIR
mkdir $REMOTE_DIR
mkdir $SANDBOX_DIR/src

cd $SANDBOX_DIR
create_remote_foo_repo > /dev/null

# Setup devo
. $DEVO_INSTALL_DIR/lib/devo/devo-setup.source
devo_setup ov1

test_clone
test_update
